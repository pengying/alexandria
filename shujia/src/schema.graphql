# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateBook {
  _count: BookCountAggregate
  _max: BookMaxAggregate
  _min: BookMinAggregate
}

type AggregateBookRevision {
  _avg: BookRevisionAvgAggregate
  _count: BookRevisionCountAggregate
  _max: BookRevisionMaxAggregate
  _min: BookRevisionMinAggregate
  _sum: BookRevisionSumAggregate
}

type Book {
  bookEdited(where: BookRevisionWhereInput): BookRevision
  bookRaw(where: BookRevisionWhereInput): BookRevision
  createdAt: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO!
  uuid: String!
}

type BookCountAggregate {
  _all: Int!
  createdAt: Int!
  title: Int!
  updatedAt: Int!
  uuid: Int!
}

input BookCountOrderByAggregateInput {
  createdAt: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
}

input BookCreateInput {
  bookEdited: BookRevisionCreateNestedOneWithoutBookEditedInput
  bookRaw: BookRevisionCreateNestedOneWithoutBookRawInput
  createdAt: DateTimeISO
  title: String!
  updatedAt: DateTimeISO
  uuid: String
}

input BookCreateManyInput {
  createdAt: DateTimeISO
  title: String!
  updatedAt: DateTimeISO
  uuid: String
}

input BookCreateNestedOneWithoutBookEditedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookEditedInput
  create: BookCreateWithoutBookEditedInput
}

input BookCreateNestedOneWithoutBookRawInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookRawInput
  create: BookCreateWithoutBookRawInput
}

input BookCreateOrConnectWithoutBookEditedInput {
  create: BookCreateWithoutBookEditedInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutBookRawInput {
  create: BookCreateWithoutBookRawInput!
  where: BookWhereUniqueInput!
}

input BookCreateWithoutBookEditedInput {
  bookRaw: BookRevisionCreateNestedOneWithoutBookRawInput
  createdAt: DateTimeISO
  title: String!
  updatedAt: DateTimeISO
  uuid: String
}

input BookCreateWithoutBookRawInput {
  bookEdited: BookRevisionCreateNestedOneWithoutBookEditedInput
  createdAt: DateTimeISO
  title: String!
  updatedAt: DateTimeISO
  uuid: String
}

type BookGroupBy {
  _count: BookCountAggregate
  _max: BookMaxAggregate
  _min: BookMinAggregate
  createdAt: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO!
  uuid: String!
}

type BookMaxAggregate {
  createdAt: DateTimeISO
  title: String
  updatedAt: DateTimeISO
  uuid: String
}

input BookMaxOrderByAggregateInput {
  createdAt: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
}

type BookMinAggregate {
  createdAt: DateTimeISO
  title: String
  updatedAt: DateTimeISO
  uuid: String
}

input BookMinOrderByAggregateInput {
  createdAt: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
}

input BookNullableRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

input BookOrderByWithAggregationInput {
  _count: BookCountOrderByAggregateInput
  _max: BookMaxOrderByAggregateInput
  _min: BookMinOrderByAggregateInput
  createdAt: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
}

input BookOrderByWithRelationInput {
  bookEdited: BookRevisionOrderByWithRelationInput
  bookRaw: BookRevisionOrderByWithRelationInput
  createdAt: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
}

type BookRevision {
  bookEdited(where: BookWhereInput): Book
  bookEditedId: String
  bookRaw(where: BookWhereInput): Book
  bookRawId: String
  completionTokens: Int
  content: [String!]!
  createdAt: DateTimeISO!
  isRaw: Boolean!
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO!
  userPrompt: String
  uuid: String!
}

type BookRevisionAvgAggregate {
  completionTokens: Float
  promptTokens: Float
  totalTokens: Float
}

input BookRevisionAvgOrderByAggregateInput {
  completionTokens: SortOrder
  promptTokens: SortOrder
  totalTokens: SortOrder
}

type BookRevisionCountAggregate {
  _all: Int!
  bookEditedId: Int!
  bookRawId: Int!
  completionTokens: Int!
  content: Int!
  createdAt: Int!
  isRaw: Int!
  model: Int!
  promptTokens: Int!
  raw: Int!
  requestId: Int!
  systemPrompt: Int!
  totalTokens: Int!
  updatedAt: Int!
  userPrompt: Int!
  uuid: Int!
}

input BookRevisionCountOrderByAggregateInput {
  bookEditedId: SortOrder
  bookRawId: SortOrder
  completionTokens: SortOrder
  content: SortOrder
  createdAt: SortOrder
  isRaw: SortOrder
  model: SortOrder
  promptTokens: SortOrder
  raw: SortOrder
  requestId: SortOrder
  systemPrompt: SortOrder
  totalTokens: SortOrder
  updatedAt: SortOrder
  userPrompt: SortOrder
  uuid: SortOrder
}

input BookRevisionCreateInput {
  bookEdited: BookCreateNestedOneWithoutBookEditedInput
  bookRaw: BookCreateNestedOneWithoutBookRawInput
  completionTokens: Int
  content: BookRevisionCreatecontentInput
  createdAt: DateTimeISO
  isRaw: Boolean
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO
  userPrompt: String
  uuid: String
}

input BookRevisionCreateManyInput {
  bookEditedId: String
  bookRawId: String
  completionTokens: Int
  content: BookRevisionCreatecontentInput
  createdAt: DateTimeISO
  isRaw: Boolean
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO
  userPrompt: String
  uuid: String
}

input BookRevisionCreateNestedOneWithoutBookEditedInput {
  connect: BookRevisionWhereUniqueInput
  connectOrCreate: BookRevisionCreateOrConnectWithoutBookEditedInput
  create: BookRevisionCreateWithoutBookEditedInput
}

input BookRevisionCreateNestedOneWithoutBookRawInput {
  connect: BookRevisionWhereUniqueInput
  connectOrCreate: BookRevisionCreateOrConnectWithoutBookRawInput
  create: BookRevisionCreateWithoutBookRawInput
}

input BookRevisionCreateOrConnectWithoutBookEditedInput {
  create: BookRevisionCreateWithoutBookEditedInput!
  where: BookRevisionWhereUniqueInput!
}

input BookRevisionCreateOrConnectWithoutBookRawInput {
  create: BookRevisionCreateWithoutBookRawInput!
  where: BookRevisionWhereUniqueInput!
}

input BookRevisionCreateWithoutBookEditedInput {
  bookRaw: BookCreateNestedOneWithoutBookRawInput
  completionTokens: Int
  content: BookRevisionCreatecontentInput
  createdAt: DateTimeISO
  isRaw: Boolean
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO
  userPrompt: String
  uuid: String
}

input BookRevisionCreateWithoutBookRawInput {
  bookEdited: BookCreateNestedOneWithoutBookEditedInput
  completionTokens: Int
  content: BookRevisionCreatecontentInput
  createdAt: DateTimeISO
  isRaw: Boolean
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO
  userPrompt: String
  uuid: String
}

input BookRevisionCreatecontentInput {
  set: [String!]!
}

type BookRevisionGroupBy {
  _avg: BookRevisionAvgAggregate
  _count: BookRevisionCountAggregate
  _max: BookRevisionMaxAggregate
  _min: BookRevisionMinAggregate
  _sum: BookRevisionSumAggregate
  bookEditedId: String
  bookRawId: String
  completionTokens: Int
  content: [String!]
  createdAt: DateTimeISO!
  isRaw: Boolean!
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO!
  userPrompt: String
  uuid: String!
}

type BookRevisionMaxAggregate {
  bookEditedId: String
  bookRawId: String
  completionTokens: Int
  createdAt: DateTimeISO
  isRaw: Boolean
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO
  userPrompt: String
  uuid: String
}

input BookRevisionMaxOrderByAggregateInput {
  bookEditedId: SortOrder
  bookRawId: SortOrder
  completionTokens: SortOrder
  createdAt: SortOrder
  isRaw: SortOrder
  model: SortOrder
  promptTokens: SortOrder
  raw: SortOrder
  requestId: SortOrder
  systemPrompt: SortOrder
  totalTokens: SortOrder
  updatedAt: SortOrder
  userPrompt: SortOrder
  uuid: SortOrder
}

type BookRevisionMinAggregate {
  bookEditedId: String
  bookRawId: String
  completionTokens: Int
  createdAt: DateTimeISO
  isRaw: Boolean
  model: String
  promptTokens: Int
  raw: String
  requestId: String
  systemPrompt: String
  totalTokens: Int
  updatedAt: DateTimeISO
  userPrompt: String
  uuid: String
}

input BookRevisionMinOrderByAggregateInput {
  bookEditedId: SortOrder
  bookRawId: SortOrder
  completionTokens: SortOrder
  createdAt: SortOrder
  isRaw: SortOrder
  model: SortOrder
  promptTokens: SortOrder
  raw: SortOrder
  requestId: SortOrder
  systemPrompt: SortOrder
  totalTokens: SortOrder
  updatedAt: SortOrder
  userPrompt: SortOrder
  uuid: SortOrder
}

input BookRevisionNullableRelationFilter {
  is: BookRevisionWhereInput
  isNot: BookRevisionWhereInput
}

input BookRevisionOrderByWithAggregationInput {
  _avg: BookRevisionAvgOrderByAggregateInput
  _count: BookRevisionCountOrderByAggregateInput
  _max: BookRevisionMaxOrderByAggregateInput
  _min: BookRevisionMinOrderByAggregateInput
  _sum: BookRevisionSumOrderByAggregateInput
  bookEditedId: SortOrderInput
  bookRawId: SortOrderInput
  completionTokens: SortOrderInput
  content: SortOrder
  createdAt: SortOrder
  isRaw: SortOrder
  model: SortOrderInput
  promptTokens: SortOrderInput
  raw: SortOrderInput
  requestId: SortOrderInput
  systemPrompt: SortOrderInput
  totalTokens: SortOrderInput
  updatedAt: SortOrder
  userPrompt: SortOrderInput
  uuid: SortOrder
}

input BookRevisionOrderByWithRelationInput {
  bookEdited: BookOrderByWithRelationInput
  bookEditedId: SortOrderInput
  bookRaw: BookOrderByWithRelationInput
  bookRawId: SortOrderInput
  completionTokens: SortOrderInput
  content: SortOrder
  createdAt: SortOrder
  isRaw: SortOrder
  model: SortOrderInput
  promptTokens: SortOrderInput
  raw: SortOrderInput
  requestId: SortOrderInput
  systemPrompt: SortOrderInput
  totalTokens: SortOrderInput
  updatedAt: SortOrder
  userPrompt: SortOrderInput
  uuid: SortOrder
}

enum BookRevisionScalarFieldEnum {
  bookEditedId
  bookRawId
  completionTokens
  content
  createdAt
  isRaw
  model
  promptTokens
  raw
  requestId
  systemPrompt
  totalTokens
  updatedAt
  userPrompt
  uuid
}

input BookRevisionScalarWhereWithAggregatesInput {
  AND: [BookRevisionScalarWhereWithAggregatesInput!]
  NOT: [BookRevisionScalarWhereWithAggregatesInput!]
  OR: [BookRevisionScalarWhereWithAggregatesInput!]
  bookEditedId: UuidNullableWithAggregatesFilter
  bookRawId: UuidNullableWithAggregatesFilter
  completionTokens: IntNullableWithAggregatesFilter
  content: StringNullableListFilter
  createdAt: DateTimeWithAggregatesFilter
  isRaw: BoolWithAggregatesFilter
  model: StringNullableWithAggregatesFilter
  promptTokens: IntNullableWithAggregatesFilter
  raw: StringNullableWithAggregatesFilter
  requestId: StringNullableWithAggregatesFilter
  systemPrompt: StringNullableWithAggregatesFilter
  totalTokens: IntNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userPrompt: StringNullableWithAggregatesFilter
  uuid: UuidWithAggregatesFilter
}

type BookRevisionSumAggregate {
  completionTokens: Int
  promptTokens: Int
  totalTokens: Int
}

input BookRevisionSumOrderByAggregateInput {
  completionTokens: SortOrder
  promptTokens: SortOrder
  totalTokens: SortOrder
}

input BookRevisionUpdateInput {
  bookEdited: BookUpdateOneWithoutBookEditedNestedInput
  bookRaw: BookUpdateOneWithoutBookRawNestedInput
  completionTokens: NullableIntFieldUpdateOperationsInput
  content: BookRevisionUpdatecontentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isRaw: BoolFieldUpdateOperationsInput
  model: NullableStringFieldUpdateOperationsInput
  promptTokens: NullableIntFieldUpdateOperationsInput
  raw: NullableStringFieldUpdateOperationsInput
  requestId: NullableStringFieldUpdateOperationsInput
  systemPrompt: NullableStringFieldUpdateOperationsInput
  totalTokens: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPrompt: NullableStringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookRevisionUpdateManyMutationInput {
  completionTokens: NullableIntFieldUpdateOperationsInput
  content: BookRevisionUpdatecontentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isRaw: BoolFieldUpdateOperationsInput
  model: NullableStringFieldUpdateOperationsInput
  promptTokens: NullableIntFieldUpdateOperationsInput
  raw: NullableStringFieldUpdateOperationsInput
  requestId: NullableStringFieldUpdateOperationsInput
  systemPrompt: NullableStringFieldUpdateOperationsInput
  totalTokens: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPrompt: NullableStringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookRevisionUpdateOneWithoutBookEditedNestedInput {
  connect: BookRevisionWhereUniqueInput
  connectOrCreate: BookRevisionCreateOrConnectWithoutBookEditedInput
  create: BookRevisionCreateWithoutBookEditedInput
  delete: BookRevisionWhereInput
  disconnect: BookRevisionWhereInput
  update: BookRevisionUpdateToOneWithWhereWithoutBookEditedInput
  upsert: BookRevisionUpsertWithoutBookEditedInput
}

input BookRevisionUpdateOneWithoutBookRawNestedInput {
  connect: BookRevisionWhereUniqueInput
  connectOrCreate: BookRevisionCreateOrConnectWithoutBookRawInput
  create: BookRevisionCreateWithoutBookRawInput
  delete: BookRevisionWhereInput
  disconnect: BookRevisionWhereInput
  update: BookRevisionUpdateToOneWithWhereWithoutBookRawInput
  upsert: BookRevisionUpsertWithoutBookRawInput
}

input BookRevisionUpdateToOneWithWhereWithoutBookEditedInput {
  data: BookRevisionUpdateWithoutBookEditedInput!
  where: BookRevisionWhereInput
}

input BookRevisionUpdateToOneWithWhereWithoutBookRawInput {
  data: BookRevisionUpdateWithoutBookRawInput!
  where: BookRevisionWhereInput
}

input BookRevisionUpdateWithoutBookEditedInput {
  bookRaw: BookUpdateOneWithoutBookRawNestedInput
  completionTokens: NullableIntFieldUpdateOperationsInput
  content: BookRevisionUpdatecontentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isRaw: BoolFieldUpdateOperationsInput
  model: NullableStringFieldUpdateOperationsInput
  promptTokens: NullableIntFieldUpdateOperationsInput
  raw: NullableStringFieldUpdateOperationsInput
  requestId: NullableStringFieldUpdateOperationsInput
  systemPrompt: NullableStringFieldUpdateOperationsInput
  totalTokens: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPrompt: NullableStringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookRevisionUpdateWithoutBookRawInput {
  bookEdited: BookUpdateOneWithoutBookEditedNestedInput
  completionTokens: NullableIntFieldUpdateOperationsInput
  content: BookRevisionUpdatecontentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  isRaw: BoolFieldUpdateOperationsInput
  model: NullableStringFieldUpdateOperationsInput
  promptTokens: NullableIntFieldUpdateOperationsInput
  raw: NullableStringFieldUpdateOperationsInput
  requestId: NullableStringFieldUpdateOperationsInput
  systemPrompt: NullableStringFieldUpdateOperationsInput
  totalTokens: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userPrompt: NullableStringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookRevisionUpdatecontentInput {
  push: [String!]
  set: [String!]
}

input BookRevisionUpsertWithoutBookEditedInput {
  create: BookRevisionCreateWithoutBookEditedInput!
  update: BookRevisionUpdateWithoutBookEditedInput!
  where: BookRevisionWhereInput
}

input BookRevisionUpsertWithoutBookRawInput {
  create: BookRevisionCreateWithoutBookRawInput!
  update: BookRevisionUpdateWithoutBookRawInput!
  where: BookRevisionWhereInput
}

input BookRevisionWhereInput {
  AND: [BookRevisionWhereInput!]
  NOT: [BookRevisionWhereInput!]
  OR: [BookRevisionWhereInput!]
  bookEdited: BookNullableRelationFilter
  bookEditedId: UuidNullableFilter
  bookRaw: BookNullableRelationFilter
  bookRawId: UuidNullableFilter
  completionTokens: IntNullableFilter
  content: StringNullableListFilter
  createdAt: DateTimeFilter
  isRaw: BoolFilter
  model: StringNullableFilter
  promptTokens: IntNullableFilter
  raw: StringNullableFilter
  requestId: StringNullableFilter
  systemPrompt: StringNullableFilter
  totalTokens: IntNullableFilter
  updatedAt: DateTimeFilter
  userPrompt: StringNullableFilter
  uuid: UuidFilter
}

input BookRevisionWhereUniqueInput {
  AND: [BookRevisionWhereInput!]
  NOT: [BookRevisionWhereInput!]
  OR: [BookRevisionWhereInput!]
  bookEdited: BookNullableRelationFilter
  bookEditedId: String
  bookRaw: BookNullableRelationFilter
  bookRawId: String
  completionTokens: IntNullableFilter
  content: StringNullableListFilter
  createdAt: DateTimeFilter
  isRaw: BoolFilter
  model: StringNullableFilter
  promptTokens: IntNullableFilter
  raw: StringNullableFilter
  requestId: StringNullableFilter
  systemPrompt: StringNullableFilter
  totalTokens: IntNullableFilter
  updatedAt: DateTimeFilter
  userPrompt: StringNullableFilter
  uuid: String
}

enum BookScalarFieldEnum {
  createdAt
  title
  updatedAt
  uuid
}

input BookScalarWhereWithAggregatesInput {
  AND: [BookScalarWhereWithAggregatesInput!]
  NOT: [BookScalarWhereWithAggregatesInput!]
  OR: [BookScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  uuid: UuidWithAggregatesFilter
}

input BookUpdateInput {
  bookEdited: BookRevisionUpdateOneWithoutBookEditedNestedInput
  bookRaw: BookRevisionUpdateOneWithoutBookRawNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookUpdateOneWithoutBookEditedNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookEditedInput
  create: BookCreateWithoutBookEditedInput
  delete: BookWhereInput
  disconnect: BookWhereInput
  update: BookUpdateToOneWithWhereWithoutBookEditedInput
  upsert: BookUpsertWithoutBookEditedInput
}

input BookUpdateOneWithoutBookRawNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookRawInput
  create: BookCreateWithoutBookRawInput
  delete: BookWhereInput
  disconnect: BookWhereInput
  update: BookUpdateToOneWithWhereWithoutBookRawInput
  upsert: BookUpsertWithoutBookRawInput
}

input BookUpdateToOneWithWhereWithoutBookEditedInput {
  data: BookUpdateWithoutBookEditedInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutBookRawInput {
  data: BookUpdateWithoutBookRawInput!
  where: BookWhereInput
}

input BookUpdateWithoutBookEditedInput {
  bookRaw: BookRevisionUpdateOneWithoutBookRawNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookUpdateWithoutBookRawInput {
  bookEdited: BookRevisionUpdateOneWithoutBookEditedNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input BookUpsertWithoutBookEditedInput {
  create: BookCreateWithoutBookEditedInput!
  update: BookUpdateWithoutBookEditedInput!
  where: BookWhereInput
}

input BookUpsertWithoutBookRawInput {
  create: BookCreateWithoutBookRawInput!
  update: BookUpdateWithoutBookRawInput!
  where: BookWhereInput
}

input BookWhereInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  bookEdited: BookRevisionNullableRelationFilter
  bookRaw: BookRevisionNullableRelationFilter
  createdAt: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: UuidFilter
}

input BookWhereUniqueInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  bookEdited: BookRevisionNullableRelationFilter
  bookRaw: BookRevisionNullableRelationFilter
  createdAt: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyBook(data: [BookCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBookRevision(data: [BookRevisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneBook(data: BookCreateInput!): Book!
  createOneBookRevision(data: BookRevisionCreateInput!): BookRevision!
  deleteManyBook(where: BookWhereInput): AffectedRowsOutput!
  deleteManyBookRevision(where: BookRevisionWhereInput): AffectedRowsOutput!
  deleteOneBook(where: BookWhereUniqueInput!): Book
  deleteOneBookRevision(where: BookRevisionWhereUniqueInput!): BookRevision
  generateBookFromPrompt(prompt: PromptInput!): String!
  updateManyBook(data: BookUpdateManyMutationInput!, where: BookWhereInput): AffectedRowsOutput!
  updateManyBookRevision(data: BookRevisionUpdateManyMutationInput!, where: BookRevisionWhereInput): AffectedRowsOutput!
  updateOneBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateOneBookRevision(data: BookRevisionUpdateInput!, where: BookRevisionWhereUniqueInput!): BookRevision
  upsertOneBook(create: BookCreateInput!, update: BookUpdateInput!, where: BookWhereUniqueInput!): Book!
  upsertOneBookRevision(create: BookRevisionCreateInput!, update: BookRevisionUpdateInput!, where: BookRevisionWhereUniqueInput!): BookRevision!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String!]
}

input NestedUuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidNullableFilter
  notIn: [String!]
}

input NestedUuidNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidNullableWithAggregatesFilter
  notIn: [String!]
}

input NestedUuidWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidWithAggregatesFilter
  notIn: [String!]
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

input PromptInput {
  age: Int!
  name: String!
  prompt: String!
}

type Query {
  aggregateBook(cursor: BookWhereUniqueInput, orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): AggregateBook!
  aggregateBookRevision(cursor: BookRevisionWhereUniqueInput, orderBy: [BookRevisionOrderByWithRelationInput!], skip: Int, take: Int, where: BookRevisionWhereInput): AggregateBookRevision!
  book(where: BookWhereUniqueInput!): Book
  bookRevision(where: BookRevisionWhereUniqueInput!): BookRevision
  bookRevisions(cursor: BookRevisionWhereUniqueInput, distinct: [BookRevisionScalarFieldEnum!], orderBy: [BookRevisionOrderByWithRelationInput!], skip: Int, take: Int, where: BookRevisionWhereInput): [BookRevision!]!
  books(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): [Book!]!
  findFirstBook(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): Book
  findFirstBookOrThrow(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): Book
  findFirstBookRevision(cursor: BookRevisionWhereUniqueInput, distinct: [BookRevisionScalarFieldEnum!], orderBy: [BookRevisionOrderByWithRelationInput!], skip: Int, take: Int, where: BookRevisionWhereInput): BookRevision
  findFirstBookRevisionOrThrow(cursor: BookRevisionWhereUniqueInput, distinct: [BookRevisionScalarFieldEnum!], orderBy: [BookRevisionOrderByWithRelationInput!], skip: Int, take: Int, where: BookRevisionWhereInput): BookRevision
  getBook(where: BookWhereUniqueInput!): Book
  getBookRevision(where: BookRevisionWhereUniqueInput!): BookRevision
  groupByBook(by: [BookScalarFieldEnum!]!, having: BookScalarWhereWithAggregatesInput, orderBy: [BookOrderByWithAggregationInput!], skip: Int, take: Int, where: BookWhereInput): [BookGroupBy!]!
  groupByBookRevision(by: [BookRevisionScalarFieldEnum!]!, having: BookRevisionScalarWhereWithAggregatesInput, orderBy: [BookRevisionOrderByWithAggregationInput!], skip: Int, take: Int, where: BookRevisionWhereInput): [BookRevisionGroupBy!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String!]
}

input UuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidNullableFilter
  notIn: [String!]
}

input UuidNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidNullableWithAggregatesFilter
  notIn: [String!]
}

input UuidWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidWithAggregatesFilter
  notIn: [String!]
}